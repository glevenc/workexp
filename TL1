TL1 command format:
<command_code>:<staging_parameter_blocks>:<message_payload_block(s)>

The staging parameter blocks determine the target NE and the identity of the object to be acted upon by the input message.
The staging parameter blocks are a series of four data blocks following the command code.
The structure of the staging parameter blocks is of the form
:[<tid>]:[<aid(s)>]:<ctag>:[general block]:

TID is the Target Identifier
AID is the Access Identifier. This block contains one or more parameters that uniquely identify the entities within the target NE
that are the object of the input message

CTAG is the Correlation Tag. It correlates an input command with its associated output response(s).
The value of the CTAG is a non-zero integer of up to six characters.

The general block includes support parameters whose values affect the way in which the
input command is to be executed in the NE.
The general block is required for all input
commands but its value can be null (that is, the general block is represented by two
successive colons that are optional when no message payload follows)

The message payload block(s)is the subject matter relating to the action to be performed by the input message.
that is subject matter of themessage. This section of the message may consist of zero (for instance, for
RTRV messages) or more data blocks in the following general form: (:<px>(,<px>)*)*;
where "px" represents a parameter (that is, data item). Each data block is delimited by
colons (:) and the last is terminated by a semi-colon (;). Each data block may have an
unlimited number of data items, each delimited by commas (,). For example, a payload
consisting of three parameter blocks, each containing three parameters would be of the
form
…:<p1>,<p2>,<p3>:<p4>,<p5>,<p6>:<p7>,<p8>,<p9>;

for example:
ent-prfL-sip:q2hp09:12:100::PDCSBILLING
ENT-PRFL-SIP:[TID]:<sipPrflId>:[CTAG]::[MAXFWD=<maxFwd>]

 ENT-PRFL-SIP  :[TID]:<sipPrflId>:[CTAG]:: 
     |                     |
<command_code>:<staging_parameter_blocks>:<message_payload_block(s)>

constructure:


TL1--------------------------------------->slam ----------------------------------->DBP
   <---------------------------------------     <-----------------------------------
                                           /||				
			                    ||
					    ||
					    ||
					    ||
					    ||
					    ||
					    ||					
	 				    ||/
	 				   clam---------------------------->sipr
					       <---------------------------
TL1 agent: do some basic check for the input validation
slam: corss check between two of more paraters in one command
dbp: do cross check between two or more paraters in different commands
clam: send the data request to layers(sip/ccs/)

TsSmiRowKey   *rowKey;  :后面的字段
TsSmiRowKey is used at the SMI to uniuely identify a row of a table 

进入slam的入口点：
../sl_tl1.c:2370 Entered slProcessTl1Evt transId = 0x4400000  tableId

进入TL1的入口点：
../agc_SIPT_NE_impl.c:15061 agc_SIPT_NE_ENT_PRFL_SIP_req called


add one command RTRV need to change those files : get data only from sipr

db/scripts/SchemaUpgrade_Cmn_960.SQL
signaling/lm/clam/cl_tb_sipr.c
signaling/lm/clam/LynxSipr/makefile
signaling/lm/common/lm.h
signaling/lm/common/lm_bdy1.c
signaling/lm/slam/unit/sl_unit.h
signaling/lm/slam/unit/Lynx/makefile
table_defs/tb.h
table_defs/tb_defs.c
table_defs/tb_sipt.c
table_defs/tb_sipt.h
tl1/inc/gencode/agc_SIPT_NE.h
tl1/inc/gencode/agc_SIPT_NE_map.h
tl1/inc/gencode/agc_SIPT_NE_req.h
tl1/inc/telcode/tl1_tsm.h
tl1/src/gencode/agc_SIPT_NE.c
tl1/src/gencode/agc_SIPT_NE_map.c
tl1/src/gencode/agc_SIPT_NE_meta_retrieval.c
tl1/src/gencode/tl1_cmd_matrix.c
tl1/src/telcode/tl1_msg.c
tl1/src/telcode/tl1_tsm.c
tl1/src/user_impl/agc_SIPT_NE_impl.c
signaling/lm/slam/unit/sl_ipblacklist.c
signaling/lm/clam/cl_sipr_ipblacklist.h
signaling/lm/clam/cl_sipr_ipblacklist1.c
signaling/lm/clam/cl_sipr_ipblacklist2.c


add one parameter to the existing command:

db/scripts/ALGP_Create_MGC.SQL
signaling/lm/clam/cl_prflsip2.c
signaling/lm/clam/cl_prflsipt2.c
signaling/lm/clam/cl_sipr_prflsip.c
signaling/lm/clam/cl_sipr_prflsipt.c
signaling/sip2.7/intface/sip0if.h
signaling/sip2.7/intface/sipaiptrnk.h
signaling/sip2.7/sip/siptsl2.c
signaling/sip2.7/sip/siptstrc.h
signaling/sip2.7/sip/sipttrx2.c
signaling/sip2.7/sip/siptutil.c
signaling/sip2.7/tools/telica_sfed/sxamsg.c
signaling/sip2.7/tools/telica_sfed/sxapx.c
signaling/sip2.7/tools/telica_sfed/sxastrc.h
signaling/sip2.7/tools/telica_sipa/sipacclsm.c
signaling/sip2.7/tools/telica_sipa/sipaiptrnk.c
table_defs/tb_sipt.c
table_defs/tb_sipt.h
telica_common/inc/agc_SIPT_NE_enum.h
tl1/inc/gencode/agc_SIPT_NE.h
tl1/inc/gencode/agc_SIPT_NE_req.h
tl1/src/gencode/agc_SIPT_NE.c
tl1/src/gencode/agc_SIPT_NE_enum.c
tl1/src/gencode/agc_SIPT_NE_map.c
tl1/src/gencode/agc_SIPT_NE_meta_retrieval.c
tl1/src/telcode/tl1_tsm.c
tl1/src/user_impl/agc_SIPT_NE_impl.c
tl1/xml/SIPT_NE_native.xml


RTRV-PRFL-SIP:: request flow


main( int argc, char *argv[])   // components/tl1/src/user_impl/lumos_entry_impl.c
	 main_threads.c::lumos_multi_threaded(argc,argv)
	 	1.1 initCommandSet(procInfo.ChassisType, procInfo.MgType, procInfo.SgType);//Initialize the TL1 command set for this chassis type
	 			---master_req_array[master_req_list.length++] =(TL1_REQUEST_MESSAGE *)cmdMatrix[i].tl1CmdPtr; 
	 				cmdMatrix[i]={&RTRV_PRFL_SIP_req_message,           ((                        PLT_MGC_ALL|PLT_ATCA_MGC_BIT|PLT_VCP_BIT|PLT_CLOUD_BIT) | UAP_VW     _MSK | CMD_EXM_BIT) },
	 	1.2 threadId = eosl_thread_create( listen_loop, 0, (void *)&ports[i] ); ////create a listen thread.
	 					1.2.1 listen_loop()::eosl_thread_create( main_loop,SESSION_THREAD_STACK_SIZE,(void *)ses_handle )//thread to manage the session
	 							main_loop()::tc_process_data(ses_handle)
	 								a_process_data( fd )
	 									agent.c::s_a_process_requests( ses, &Current_Network_Element );
	 										char *commandTmp = ts_extract_tl1_request( ses );//Extract the current request out of a session struct
	 										 a_finalprocess_requests( ses, &Current_Network_Element, command );
	 										 	TL1_REQUEST_STATUS:trs = tp_parse_tl1_request( ses->handle, command, &tl1_r );
	 										 	 param_status = s_a_validate_parameter( ses, message_info, tl1_r ,command);
	 										 	 	mapping_success =tl1_rm->request_map_function( ses->handle, tl1_r->ctag, trpl );
	 										 	 	{const REQUEST_MAP_FUNCTION request_map_function; /* The request mapped function pointer*/}
	 										 	 	typedef eosl_bool (* REQUEST_MAP_FUNCTION)( eosl_handle, TL1_TAG, TL1_REQUEST_PARAMETER_LIST *);
	 										 	 	map to:agc_SIPT_NE.c::agc_SIPT_NE_RTRV_PRFL_SIP_map()
	 										 	 	
map to: 
agc_SIPT_NE_RTRV_PRFL_SIP_map( const char * modifier, eosl_handle handle, TL1_TAG ctag, TL1_REQUEST_PARAMETER_LIST *lis t)
	agc_SIPT_NE_RTRV_PRFL_SIP_req( modifier, handle, ctag,(char *)list->array[0]);
		agc_SIPT_NE_impl.c::agc_SIPT_NE_RTRV_PRFL_SIP_req( const char * modifier,\                                                                
20590                                          eosl_handle handle,\
20591                                          TL1_TAG ctag ,\
20592                                          char * _sipPrflId)
		emfPkSmiSetReq(cmd, handle, transId, tableId, &rowKey, &colArray, &smCmd, TL1_MSG_TIMEOUT) send the req to slam
			  TL1SendMsg()
			  	rc = TL1QueueEventForPublication(&pubMsg) /* Queue message to be published by main thread
			  		pthread_send_queue()
			  			pthread_send_queue_opt()
		emfUnpkSmiGetMultiResp(rtrvPrflSipMultiTsmResp, &smCmdPtr, &length, handle)
			rtrvPrflSipMultiTsmResp()::agc_SIPT_NE_RTRV_PRFL_SIP_resp(modifier,
10884                                    handle,
10885                                    ctag,
10886                                    finalCompletionCode,
10887                                    rows,
10888                                    lumosRowIndex,
10889                                    "RTRV-PRFL-SIP",
10890                                    tl1_b);
				&RTRV_PRFL_SIP_resp_param()::&
			tf_format_end_message( tl1_b, comment); 
				tc_send_tl1_messsage( tl1_b); Send a TL1 message back to the oss
					
	
TL1AGENT---->SLAM:	 										 	
	 											
emfPkSmiSetReq(cmd, handle, transId, tableId, &rowKey, &colArray, &smCmd, TL1_MSG_TIMEOUT):

S16 slActvTsk(Pst *pst,Buffer *mBuf)
	case ENTGA:
		ret = handleGaPst(pst,mBuf); 
			slHandleTL1Evt(pst, mbuf);
				ret = SFndLenMsg(mbuf, &len);/* message from TL1 agent via GIT */
				ret = SGetSBuf(slCb.region,slCb.pool, (Data **) &slSmCmd, sizeof(SMCMD_t));
				ret = SRemPstMsgMult((Data *)slSmCmd, len, mbuf);
				pSmCmd = slSmCmd;
				switch(pSmCmd->Tl1Cmd.Cmd)
				case (SM_RTRV_REQUEST):
				ret = emfUnpkSmiSetReq(slSmCmd, slProcessTl1Evt, NULL /*&tsmPst*/, &myBuf, &len);
					emfUnpkTsTransId(&transId, buf, len)
					emfUnpkTsTableId(&tableId, buf, len)
					emfUnpkTsRowKey(&rowKey, buf, len)
					emfUnpkTsColArray(&colArray, buf, len)
					ret = (*func)((TL1_CMD_BUF_t *)smCmd, pst, transId, tableId, &rowKey, &colArray);
				slProcessTl1Evt(TL1_CMD_BUF_t  *tl1Cmd, Pst *pst,TsTransId transId,TsTableId tableId,TsSmiRowKey rowKey,TsSmiColArray *colArray)
					case SM_RTRV_REQUEST:
					slTl1Cb->lmTl1Evt = LM_TL1_RTRV_EVT;
					ret = slTl1CheckAllClams(&tl1Err, &errClamId);
					ret=slFindEvMt(slTl1Cb);  //builds the key and hashes into the event matrix
						ret=cmHashListFind(&lmCb.evtMtTbl,(U8 *)&key,(U16)sizeof(LmKey), 0,(PTR *)&tmpMtHlBlk);//Find the event matrix
					case LM_TL1_FSM_CLASS_1:
					switch(slTl1Cb->lmTl1Evt)
					case LM_TL1_RTRV_EVT:
					tl1FsmEvt = SLTL1_EV_TL1_RTRV;
					fsmInstId = slGetNextTl1FsmInst(); //It will be used to create the FSM instance.
					ret = cmFsmInstInit(&slCb.tl1FsmCp[slTl1Cb->slTransCb.mtInfo->lmTl1Class],slTl1Cb,fsmInstId,NULL,0 /* no timeout */,
2618                         SLTL1_ST_IDLE);
					ret = cmFsmQueueEvt(&slCb.tl1FsmCp[slTl1Cb->slTransCb.mtInfo->lmTl1Class],slTl1Cb->fsmEnt.instId,tl1FsmEvt, NULL, NULL, FALSE);  //Queue the TL1 FSM
					
						ret = cmHashListFind()
						ret=cmQInsert(&fsmEnt->evtQCp, evtQCb);
						ret=cmFsmProcessEvtQ(fsmEnt);  //process the event queue for an FSM instance
							ret=cmQGetNext(&fsmEnt->evtQCp, NULL, (void **)&evtQCb);
							ret = fsmCp->evalEvDep(evtQCb->event, context, &evtQCb->pst, evtQCb->mBuf, &hold);
							cmFsmDriver(evtQCb);   //run a FSM instance
							|驱
							|动
							|找到状态机
						   \/通过evt 来进行驱动slam kick off 
						    slTl1_start_lower()
								ret = (context->slTransCb.mtInfo->slTl1Func)(context);
							 //in this process, it will check the LM Event Matrix in file lm_bdy1.c to find the cooresponding function.
							 	LmEvtMt *lmEvtMt[LM_EVT_MT_MAX]=&lmTl1PrflSipRtrvMt,//LM Event Matrix}
							 	lm_bdy1.c::LmEvtMt lmTl1PrflSipRtrvMt---IFSLAM(slTl1_rtrv_prflSip_fsm),
				找到slTl1_rtrv_prflSip_fsm:
					sl_prflsip.c::slTl1_rtrv_prflSip_fsm(SlTl1Cb *context)
						    switch (context->userState)
							    {                                                                                                                                 
							    case PRFL_SIP_START:
							        ret=slTl1_rtrv_prflSip_fsm_start(context);
							        	ret=slInitPstDbpMngmt(&pst, &dbMngmtReq, TELICA_TABLE_PRFLSIP, DB_GET_ROWS, 0,DB_SET, transId);// /* setup hdr and pst for DBproxy */
							        	ret = cmTbAddTbl(&dbMngmtReq.dbReq.tables, cb->prflSip->tableId, numRows,cb->prflSip, CM_TB_USER_ALLOCATED);//fill in the DbpMngmtReq
							        	ret = cmPkDbMngmtReq(&dbMngmtReq, &pst);// pack and send GET request to DBproxy
							        	context->userState = PRFL_SIP_AWT_DB_GET;
							        	
							        break;
							    case PRFL_SIP_AWT_DB_GET:
							        ret=slTl1_rtrv_prflSip_fsm_dbget(SlTl1Cb *context);
							        	ret = cmUnpkDbMngmtCfm(&dbMngmtCfm, &context->fsmEnt.pst, context->fsmEnt.mBuf); ///* unpack DBproxy cfm */
							        	ret = cmTbFndTbl(&dbMngmtCfm.dbConf.u.tables, TELICA_TABLE_PRFLSIP,0, &numRows, (void **)&cb->dbPrflSip); ///* unload data */
							        	ret=slEncodeSmiCols(context, cb->dbPrflSip, numRows, &respPtr, &respSize);/* pack TL1 RTRV reponse */Encode table structure rows into SMI columns**            for getnextmutli cases
							        	
							        	
							        break;
							    default:
							        SLM_LOG(SLM_ERR, "unsupported userState:%ld\n", context->userState);
							        break;
							    }    
